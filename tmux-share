#!/usr/bin/env bb
(ns tmux-share
  (:require [babashka.cli :as cli]
            [clojure.java.io :as io]
            [clojure.java.shell :refer [sh]]
            [clojure.string :as str])
  (:import (java.io File)
           (java.nio.file Files Path LinkOption)
           (java.nio.file.attribute PosixFilePermission)))

(defn tmux [socket-path & cmds]
  (when-not socket-path
    (ex-info "Must specify --socket-path" {:TMUX (System/getenv "TMUX")}))
  (let [{:keys [exit out err] :as result}
        , (sh "tmux" "-S" socket-path "source" "-"
              :in (apply str (mapcat list cmds (repeat "\n"))))]
    (if (zero? exit)
      (re-seq #".+" out)
      (throw (ex-info err result)))))

(defprotocol Pathable
  (^Path to-path [_]))

(extend-protocol Pathable
  String (to-path [s] (.toPath (io/file s)))
  File   (to-path [f] (.toPath f))
  Path   (to-path [p] p))

(def follow-links (into-array LinkOption []))

(defn fix-permissions [{:keys [socket-path]}]
  (let [path (to-path socket-path)
        ps (Files/getPosixFilePermissions path follow-links)
        dir? (Files/isDirectory path follow-links)]
    (if (and (contains? ps PosixFilePermission/OTHERS_READ)
             (if dir?
               (contains? ps PosixFilePermission/OTHERS_EXECUTE)
               (contains? ps PosixFilePermission/OTHERS_WRITE)))
      :ok
      (let [new-ps (conj (set ps)
                         PosixFilePermission/OTHERS_READ
                         (if dir?
                           PosixFilePermission/OTHERS_EXECUTE
                           PosixFilePermission/OTHERS_WRITE))]
        (Files/setPosixFilePermissions path new-ps)
        (recur (.getParent path))))))

(defn set-status-left [{:keys [socket-path user tmux-share]}]
  (when-not tmux-share
    (throw (ex-info "Don't know how to invoke self" {})))
  (tmux socket-path
        (str "set-option -g status-left '" user " #(" tmux-share " list-users) '")
        "set-option -g status-left-length 50"
        "set-option -g status-interval 5")
  :ok)

(defn list-users [{:keys [socket-path user]}]
  (->> (tmux socket-path
             "list-clients -F '#{client_name}'")
       (map #(str (Files/getOwner (to-path %) follow-links)))
       (remove #(= % user))
       sort))

(defn new-session [])

;;;;; cli parsing

(declare cli-table)

(defn help [_]
  (println "USAGE: tmux-share <command> <options>")
  (println "COMMANDS:")
  (->> cli-table
       (run! (fn [{:keys [cmds fn doc]}]
               (println (format "  %-16s %s" (or (first cmds) "help") doc)))))
  (println "OPTIONS:")
  (println "      --user         Username to show in bottom-left corner and exclude from user list")
  (println "      --tmux-share   Full path to this program; used in dynamic status line")
  (println "  -S  --socket-path  Path to tmux server socket, often like /tmp/tmux-1001/default")
  (println "                     Defaults to the current socket when run from inside tmux"))

(defn cmd [f]
  (fn [{:keys [opts] :as parsed}]
    (if (:help opts)
      (help opts)
      (println (f opts)))))

(def cli-table
  [{:doc "Allow other users to attach to and control a running tmux server"
    :cmds ["fix-permissions"] :fn (cmd fix-permissions)}
   {:doc "Set status-left to show session owner's name and names of connected users"
    :cmds ["set-status-left"] :fn (cmd set-status-left)}
   {:doc "Print space-separated list of all users connected to a session"
    :cmds ["list-users"]      :fn (cmd list-users)}
   {:doc "Create a new shareable session. If no socket-path is specified, creates a new socket"
    :cmds ["new"]             :fn (cmd new-session)}
   {:doc "Print this usage message"
    :cmds []                  :fn (cmd help)}])

(defn defaults []
  {:user (System/getenv "USER")
   :socket-path (some->> (System/getenv "TMUX") (re-find #"^[^,]+"))
   :tmux-share (System/getProperty "babashka.file")})

(defn main [& args]
  (cli/dispatch cli-table args {:alias {:S :socket-path}
                                :exec-args (defaults)}))

(when (= *file* (System/getProperty "babashka.file"))
  (apply main *command-line-args*))
